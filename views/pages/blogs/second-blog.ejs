<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- CSS STYLE SHEET -->
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/blog/second-blog/second-blog.css" />

  <title>Archibong | Second Blog</title>
</head>
<body>
  
  <main class="main-blog-section">
  
    <article class="main-blog-inner">
  
      <div class="main-blog-banner second-blog">
        <h2>Tips On Solving Coding Challenges</h2>
      </div>
  
      <div class="main-blog-text second-blog">
        
        <p>In this tutorial, I am going to show you <u><b>4</b></u> steps to take when solving any coding problem.
          <br />
          <br />
          We all know that feeling of rush in our stomach when we are given a coding challenge in an interview and despite the question looking solvable or familiar, we go into half panic mode.

          <br />
          <br />

          Today, I will show you <u><b>4</b></u> simple steps to help you approach any coding challenge and come out victorious &#x1F4AA;

          <br />
          <br />
          Note: this plan was devised by web development teachers like Professor David Evans and Colt Steele but the example i will show will be an example i used myself to implement this pattern. &#x1F64C;
          <br />
          <br />

          First, Let me highlight the four steps:
          <br />
          <br />
        </p>

        <p>1. Understand the problem</p>
        <p>2. Devise a plan</p>
        <p>3. Carry out the plan</p>
        <p>4. Look back</p>

        <h3>1. Understand The Problem</h3>
        <br />

        <p> 
          You may receive a familiar question and       naturally rush into task solving but this usually leads to making mistakes along the way and realizing your initial approach had some bugs.

          <br />
          <br />
          To combat this, take time and read through the question and then do 3 things:

          I know there is a lot of enumeration in this article &#x1F923; but bear with me, you will soon understand why.

          <br />
          <br />

          e.g when given a question like this

          <br />
          <br />
          
          <span class="text-simulator">
            Write a program that takes in an integer and check if the integer is greater than 15. If it is then return the number
            else return 15
          </span>

          <h4>a. What are the inputs?</h4>
          <br />
          <br />
          
          <p>
            Inputs are the arguments that will be passed into the function which is the program in this case.

            <br />
            <br />
            
            So figure out what the input will be..

            <br />
            <br />
          </p>
          
          <img src="/assets/images/blog/coding-challenge-1-cropped.png" alt="coding-challenge-1" width="100%"/>

          <p>
            <br />
            <br />
            In this case it will be just one input as demonstrated above.
          </p>

          <h4>a. What are the Outputs?</h4>
          <br />
          <br />

          <p>
            Also, according to the task above, we are to return the number 15 if input is less than 15 or the entered number if input if above 15.

            <br />
            <br />

            This takes me to the next step..

            <h3>2. Devise a plan</h3>
            <br />

            <p>
              The plan for our case will go like this.. 
              <br />
              <br />

              <span class="text-simulator">
                
                <i>// if number is above 15 => then return number</i>
                <br />
                <i>// if number is below 15 => then return 15</i>
              </span>

              <br />
              <br />

              I know this looks like a rather short step but that is only because of the character of the problem we are solving here.
              <br />
              In real interviews it may be more extensive
            </p>

            <h3>3. Carry Out The Plan</h3>

            <p>
              <br />

              After devising your plan then you can go ahead and translate the pseudocode to real code..
              <br />
              <br />

              the solution for our example is below..
              <br />
              <br />

              <img src="/assets/images/blog/coding-challenge-2.png" alt="coding-challenge-2" width="100%" />
            </p>

            <h3>4. Look Back And Refactor</h3>
            <br />
            <p>
              When you are done and the solution is working just fine then you can check for the following.

              <br />
              <br />
              <p>a. How can i refactor the code</p>
              <p>b. Will the code break if input amount increases in the future.</p>
              <p>c. Is the code readable from a glance.</p>
            </p>

            <p>
              <br />
              <br />

              In our case the refactoring would be ..
            </p>

            <img src="/assets/images/blog/coding-challenge-3.png" alt="coding-challenge-3" width="90%" />

            <p>
              There are probably a million better ways to refactor this but i'm guessing this will suffice for now.
              
            </p>

            <p>
              <br />
              I hope this will help you next time you will be attempting a coding challenge. &#x1F917; .
              All the best.
            </p>

            <br />
            <br />
            <h4>Thank You For Your Time !!</h4>
          </p>
        </p>        

      </div>
    </article>
  </main> 
</body>
</html>